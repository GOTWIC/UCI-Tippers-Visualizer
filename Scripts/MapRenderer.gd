extends Node3D

var tile = preload("res://Subscenes/tile.tscn")
var polygonPrefab = preload("res://Subscenes/Polygon.tscn")
var buildingMaterial = preload("res://materials/building.tres")
var floorMaterial = preload("res://materials/floor.tres")

var xDim = 30
var yDim = 21

var tileCoords = [[90510, 210046], [90510, 210047], [90510, 210048], [90510, 210049], [90510, 210050], [90510, 210051], [90510, 210052], [90510, 210053], [90510, 210054], [90510, 210055], [90510, 210056], [90510, 210057], [90510, 210058], [90510, 210059], [90510, 210060], [90510, 210061], [90510, 210062], [90510, 210063], [90510, 210064], [90510, 210065], [90510, 210066], [90511, 210046], [90511, 210047], [90511, 210048], [90511, 210049], [90511, 210050], [90511, 210051], [90511, 210052], [90511, 210053], [90511, 210054], [90511, 210055], [90511, 210056], [90511, 210057], [90511, 210058], [90511, 210059], [90511, 210060], [90511, 210061], [90511, 210062], [90511, 210063], [90511, 210064], [90511, 210065], [90511, 210066], [90512, 210046], [90512, 210047], [90512, 210048], [90512, 210049], [90512, 210050], [90512, 210051], [90512, 210052], [90512, 210053], [90512, 210054], [90512, 210055], [90512, 210056], [90512, 210057], [90512, 210058], [90512, 210059], [90512, 210060], [90512, 210061], [90512, 210062], [90512, 210063], [90512, 210064], [90512, 210065], [90512, 210066], [90513, 210046], [90513, 210047], [90513, 210048], [90513, 210049], [90513, 210050], [90513, 210051], [90513, 210052], [90513, 210053], [90513, 210054], [90513, 210055], [90513, 210056], [90513, 210057], [90513, 210058], [90513, 210059], [90513, 210060], [90513, 210061], [90513, 210062], [90513, 210063], [90513, 210064], [90513, 210065], [90513, 210066], [90514, 210046], [90514, 210047], [90514, 210048], [90514, 210049], [90514, 210050], [90514, 210051], [90514, 210052], [90514, 210053], [90514, 210054], [90514, 210055], [90514, 210056], [90514, 210057], [90514, 210058], [90514, 210059], [90514, 210060], [90514, 210061], [90514, 210062], [90514, 210063], [90514, 210064], [90514, 210065], [90514, 210066], [90515, 210046], [90515, 210047], [90515, 210048], [90515, 210049], [90515, 210050], [90515, 210051], [90515, 210052], [90515, 210053], [90515, 210054], [90515, 210055], [90515, 210056], [90515, 210057], [90515, 210058], [90515, 210059], [90515, 210060], [90515, 210061], [90515, 210062], [90515, 210063], [90515, 210064], [90515, 210065], [90515, 210066], [90516, 210046], [90516, 210047], [90516, 210048], [90516, 210049], [90516, 210050], [90516, 210051], [90516, 210052], [90516, 210053], [90516, 210054], [90516, 210055], [90516, 210056], [90516, 210057], [90516, 210058], [90516, 210059], [90516, 210060], [90516, 210061], [90516, 210062], [90516, 210063], [90516, 210064], [90516, 210065], [90516, 210066], [90517, 210046], [90517, 210047], [90517, 210048], [90517, 210049], [90517, 210050], [90517, 210051], [90517, 210052], [90517, 210053], [90517, 210054], [90517, 210055], [90517, 210056], [90517, 210057], [90517, 210058], [90517, 210059], [90517, 210060], [90517, 210061], [90517, 210062], [90517, 210063], [90517, 210064], [90517, 210065], [90517, 210066], [90518, 210046], [90518, 210047], [90518, 210048], [90518, 210049], [90518, 210050], [90518, 210051], [90518, 210052], [90518, 210053], [90518, 210054], [90518, 210055], [90518, 210056], [90518, 210057], [90518, 210058], [90518, 210059], [90518, 210060], [90518, 210061], [90518, 210062], [90518, 210063], [90518, 210064], [90518, 210065], [90518, 210066], [90519, 210046], [90519, 210047], [90519, 210048], [90519, 210049], [90519, 210050], [90519, 210051], [90519, 210052], [90519, 210053], [90519, 210054], [90519, 210055], [90519, 210056], [90519, 210057], [90519, 210058], [90519, 210059], [90519, 210060], [90519, 210061], [90519, 210062], [90519, 210063], [90519, 210064], [90519, 210065], [90519, 210066], [90520, 210046], [90520, 210047], [90520, 210048], [90520, 210049], [90520, 210050], [90520, 210051], [90520, 210052], [90520, 210053], [90520, 210054], [90520, 210055], [90520, 210056], [90520, 210057], [90520, 210058], [90520, 210059], [90520, 210060], [90520, 210061], [90520, 210062], [90520, 210063], [90520, 210064], [90520, 210065], [90520, 210066], [90521, 210046], [90521, 210047], [90521, 210048], [90521, 210049], [90521, 210050], [90521, 210051], [90521, 210052], [90521, 210053], [90521, 210054], [90521, 210055], [90521, 210056], [90521, 210057], [90521, 210058], [90521, 210059], [90521, 210060], [90521, 210061], [90521, 210062], [90521, 210063], [90521, 210064], [90521, 210065], [90521, 210066], [90522, 210046], [90522, 210047], [90522, 210048], [90522, 210049], [90522, 210050], [90522, 210051], [90522, 210052], [90522, 210053], [90522, 210054], [90522, 210055], [90522, 210056], [90522, 210057], [90522, 210058], [90522, 210059], [90522, 210060], [90522, 210061], [90522, 210062], [90522, 210063], [90522, 210064], [90522, 210065], [90522, 210066], [90523, 210046], [90523, 210047], [90523, 210048], [90523, 210049], [90523, 210050], [90523, 210051], [90523, 210052], [90523, 210053], [90523, 210054], [90523, 210055], [90523, 210056], [90523, 210057], [90523, 210058], [90523, 210059], [90523, 210060], [90523, 210061], [90523, 210062], [90523, 210063], [90523, 210064], [90523, 210065], [90523, 210066], [90524, 210046], [90524, 210047], [90524, 210048], [90524, 210049], [90524, 210050], [90524, 210051], [90524, 210052], [90524, 210053], [90524, 210054], [90524, 210055], [90524, 210056], [90524, 210057], [90524, 210058], [90524, 210059], [90524, 210060], [90524, 210061], [90524, 210062], [90524, 210063], [90524, 210064], [90524, 210065], [90524, 210066], [90525, 210046], [90525, 210047], [90525, 210048], [90525, 210049], [90525, 210050], [90525, 210051], [90525, 210052], [90525, 210053], [90525, 210054], [90525, 210055], [90525, 210056], [90525, 210057], [90525, 210058], [90525, 210059], [90525, 210060], [90525, 210061], [90525, 210062], [90525, 210063], [90525, 210064], [90525, 210065], [90525, 210066], [90526, 210046], [90526, 210047], [90526, 210048], [90526, 210049], [90526, 210050], [90526, 210051], [90526, 210052], [90526, 210053], [90526, 210054], [90526, 210055], [90526, 210056], [90526, 210057], [90526, 210058], [90526, 210059], [90526, 210060], [90526, 210061], [90526, 210062], [90526, 210063], [90526, 210064], [90526, 210065], [90526, 210066], [90527, 210046], [90527, 210047], [90527, 210048], [90527, 210049], [90527, 210050], [90527, 210051], [90527, 210052], [90527, 210053], [90527, 210054], [90527, 210055], [90527, 210056], [90527, 210057], [90527, 210058], [90527, 210059], [90527, 210060], [90527, 210061], [90527, 210062], [90527, 210063], [90527, 210064], [90527, 210065], [90527, 210066], [90528, 210046], [90528, 210047], [90528, 210048], [90528, 210049], [90528, 210050], [90528, 210051], [90528, 210052], [90528, 210053], [90528, 210054], [90528, 210055], [90528, 210056], [90528, 210057], [90528, 210058], [90528, 210059], [90528, 210060], [90528, 210061], [90528, 210062], [90528, 210063], [90528, 210064], [90528, 210065], [90528, 210066], [90529, 210046], [90529, 210047], [90529, 210048], [90529, 210049], [90529, 210050], [90529, 210051], [90529, 210052], [90529, 210053], [90529, 210054], [90529, 210055], [90529, 210056], [90529, 210057], [90529, 210058], [90529, 210059], [90529, 210060], [90529, 210061], [90529, 210062], [90529, 210063], [90529, 210064], [90529, 210065], [90529, 210066], [90530, 210046], [90530, 210047], [90530, 210048], [90530, 210049], [90530, 210050], [90530, 210051], [90530, 210052], [90530, 210053], [90530, 210054], [90530, 210055], [90530, 210056], [90530, 210057], [90530, 210058], [90530, 210059], [90530, 210060], [90530, 210061], [90530, 210062], [90530, 210063], [90530, 210064], [90530, 210065], [90530, 210066], [90531, 210046], [90531, 210047], [90531, 210048], [90531, 210049], [90531, 210050], [90531, 210051], [90531, 210052], [90531, 210053], [90531, 210054], [90531, 210055], [90531, 210056], [90531, 210057], [90531, 210058], [90531, 210059], [90531, 210060], [90531, 210061], [90531, 210062], [90531, 210063], [90531, 210064], [90531, 210065], [90531, 210066], [90532, 210046], [90532, 210047], [90532, 210048], [90532, 210049], [90532, 210050], [90532, 210051], [90532, 210052], [90532, 210053], [90532, 210054], [90532, 210055], [90532, 210056], [90532, 210057], [90532, 210058], [90532, 210059], [90532, 210060], [90532, 210061], [90532, 210062], [90532, 210063], [90532, 210064], [90532, 210065], [90532, 210066], [90533, 210046], [90533, 210047], [90533, 210048], [90533, 210049], [90533, 210050], [90533, 210051], [90533, 210052], [90533, 210053], [90533, 210054], [90533, 210055], [90533, 210056], [90533, 210057], [90533, 210058], [90533, 210059], [90533, 210060], [90533, 210061], [90533, 210062], [90533, 210063], [90533, 210064], [90533, 210065], [90533, 210066], [90534, 210046], [90534, 210047], [90534, 210048], [90534, 210049], [90534, 210050], [90534, 210051], [90534, 210052], [90534, 210053], [90534, 210054], [90534, 210055], [90534, 210056], [90534, 210057], [90534, 210058], [90534, 210059], [90534, 210060], [90534, 210061], [90534, 210062], [90534, 210063], [90534, 210064], [90534, 210065], [90534, 210066], [90535, 210046], [90535, 210047], [90535, 210048], [90535, 210049], [90535, 210050], [90535, 210051], [90535, 210052], [90535, 210053], [90535, 210054], [90535, 210055], [90535, 210056], [90535, 210057], [90535, 210058], [90535, 210059], [90535, 210060], [90535, 210061], [90535, 210062], [90535, 210063], [90535, 210064], [90535, 210065], [90535, 210066], [90536, 210046], [90536, 210047], [90536, 210048], [90536, 210049], [90536, 210050], [90536, 210051], [90536, 210052], [90536, 210053], [90536, 210054], [90536, 210055], [90536, 210056], [90536, 210057], [90536, 210058], [90536, 210059], [90536, 210060], [90536, 210061], [90536, 210062], [90536, 210063], [90536, 210064], [90536, 210065], [90536, 210066], [90537, 210046], [90537, 210047], [90537, 210048], [90537, 210049], [90537, 210050], [90537, 210051], [90537, 210052], [90537, 210053], [90537, 210054], [90537, 210055], [90537, 210056], [90537, 210057], [90537, 210058], [90537, 210059], [90537, 210060], [90537, 210061], [90537, 210062], [90537, 210063], [90537, 210064], [90537, 210065], [90537, 210066], [90538, 210046], [90538, 210047], [90538, 210048], [90538, 210049], [90538, 210050], [90538, 210051], [90538, 210052], [90538, 210053], [90538, 210054], [90538, 210055], [90538, 210056], [90538, 210057], [90538, 210058], [90538, 210059], [90538, 210060], [90538, 210061], [90538, 210062], [90538, 210063], [90538, 210064], [90538, 210065], [90538, 210066], [90539, 210046], [90539, 210047], [90539, 210048], [90539, 210049], [90539, 210050], [90539, 210051], [90539, 210052], [90539, 210053], [90539, 210054], [90539, 210055], [90539, 210056], [90539, 210057], [90539, 210058], [90539, 210059], [90539, 210060], [90539, 210061], [90539, 210062], [90539, 210063], [90539, 210064], [90539, 210065], [90539, 210066]]

var tileSize = 2

var tilesLoaded = 0

var floorHeight = 0.2

var data
var binned

func _ready():
	mapCreationProcess()
	# For now, wait three seconds to allow data to load
	# before starting building rendering process
	await get_tree().create_timer(3).timeout
	buildingCreationProcess()
	
	
func _process(_delta):
	pass

func mapCreationProcess():

	var http1 = HTTPRequest.new()
	var http2 = HTTPRequest.new()
	var http3 = HTTPRequest.new()
	var http4 = HTTPRequest.new()

	get_node("HTTPReqs").add_child(http1)
	get_node("HTTPReqs").add_child(http2)
	get_node("HTTPReqs").add_child(http3)
	get_node("HTTPReqs").add_child(http4)

	var dlJobs = tileCoords.size() / 4

	downloadImgThread(http1, dlJobs, 0)
	downloadImgThread(http2, dlJobs, dlJobs)
	downloadImgThread(http3, dlJobs, dlJobs * 2)
	downloadImgThread(http4, tileCoords.size() - dlJobs * 3, dlJobs * 3)

func downloadImgThread(http, dlJobs, start):
	print("Assigning " + str(dlJobs) + " tasks to thread")
	var origin = Vector3((xDim - 1) * -0.5, 0, (yDim-1) * -0.5)
	for i in range(dlJobs):
		var texture = await downloadImage(http, tileCoords[i + start][0], tileCoords[i + start][1])	
		var rowNum = yDim - 1 - (start + i)%yDim
		var colNum = xDim - 1 - (start + i)/yDim
		var blank = tile.instantiate()
		var pixelSize = tileSize * 0.00390625 
		blank.get_node("tileSprite").set_pixel_size(pixelSize)
		blank.position = Vector3((colNum + origin.x) * tileSize, 0 , (rowNum + origin.z) * tileSize)
		blank.get_node("tileSprite").set_texture(texture)
		get_node('Tiles').add_child(blank)
		tilesLoaded += 1
	print("Thread Finished")

func downloadImage(http, xCoord, yCoord):
	var _error1 = http.request("https://tile.openstreetmap.org/19/" + str(xCoord) + "/" + str(yCoord) + ".png")
	var request_completed_info = await http.request_completed
	var result:int = request_completed_info[0];
	var _response_code:int = request_completed_info[1];
	var body:PackedByteArray = request_completed_info[3];

	if result != 0:
		print("ERROR! UNABLE TO DOWNLOAD IMAGE. Result Code: " + str(result))
		# Add verbosity from https://docs.godotengine.org/en/stable/classes/class_httprequest.html
		return null
			
	var image = Image.new()
	var _error2 = image.load_png_from_buffer(body)
	var texture = ImageTexture.create_from_image(image)
	
	return texture



func buildingCreationProcess():
	var dataObj = get_tree().get_root().get_node("Root").get_node("Data")
	data = dataObj.getData()
	binned = dataObj.getBinned()
	
	for building in binned['b']:
		var points = getBuildingPoints(data[building]['location'])
		var bID = building
		var fIDs = data[bID]['children'] 
		createBuilding(points, bID, fIDs)


func getBuildingPoints(locJson):
	var tempBuildings = get_tree().get_root().get_node("Root").get_node("TEMPBUILDINGS").get_children()
	var tempBuilding = tempBuildings[0]
	var tempPoints : PackedVector2Array
	var refPoints = tempBuilding.get_children()
	for refPoint in refPoints:
		tempPoints.append(Vector2(refPoint.global_position[0], refPoint.global_position[2]))
	return tempPoints

func createBuilding(points, bID, fIDs):
	var building = createPolygon(points, floorHeight * len(fIDs), true)
	var floors = []
	for i in range(len(fIDs)):
		var fID = fIDs[i]
		var floor = createPolygon(points, floorHeight/10, false, building)
		floor.name = data[fID]['name']
		floor.position[1] = i * floorHeight
		floor.get_node("Polygon").setID(fID)
		floors.append(floor)
	building.get_node("Polygon").setFloors(floors)
	building.get_node("Polygon").setID(bID)

func createPolygon(points : PackedVector2Array, height : float, isBuilding : bool, master = null):
	var polygonInst = polygonPrefab.instantiate()
	var poly = polygonInst.get_node("Polygon")
	if isBuilding:
		poly.set_script(load("res://Scripts/building.gd"))
		poly.material = buildingMaterial.duplicate()
	else:
		poly.set_script(load("res://Scripts/floor.gd"))
		poly.material = floorMaterial.duplicate()
	poly.polygon = points
	poly.depth = height
	if master:
		master.add_child(polygonInst)
	else:
		get_node('Buildings').add_child(polygonInst)
	return polygonInst
	
func getMapLoadProgess():
	return [tilesLoaded, xDim * yDim]
	

			
			
			
			
